version: '3.9'
name: nodejs-rest-service
services:
  app:
    build:
      context: .
      tags:
      - "${REPOSITORY}:nestjs-app"
      dockerfile: ${APP_DOCKERFILE}
      args:
        APP_WORKDIR: ${APP_WORKDIR}
        PORT: ${PORT}
        DOC_PORT: ${DOC_PORT}
    networks:
      users-bridge:
        ipv4_address: ${NETWORK_APP_IP}
    secrets:
      - source: privkey
        target: ${SSH_PRIVKEY}
      - source: cert
        target: ${SSH_CERT}
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PORT: ${PORT}
      DOC_PORT: ${DOC_PORT}
      POSTGRES_HOST: ${DB_IP}
      POSTGRES_PORT: ${POSTGRES_PORT}
      SSH_PRIVKEY: /run/secrets/${SSH_PRIVKEY}
      SSH_CERT: /run/secrets/${SSH_CERT}
      RUN_MIGRATIONS: ${RUN_MIGRATIONS}
    volumes:
      - ${APP_VOLUME}/node_modules:${APP_WORKDIR}/node_modules
      - ${APP_VOLUME}/src:${APP_WORKDIR}/src
      - ${APP_VOLUME}/doc:${APP_WORKDIR}/doc
    ports:
      - ${PORT}:${PORT}
      - ${DOC_PORT}:${DOC_PORT}
    restart: unless-stopped
  postgres:
    build: 
      dockerfile: ${BASE_DOCKERFILE}
      tags:
      - "${REPOSITORY}:postgres-db"
    command:
      - "postgres"
      - "-c"
      - "logging_collector=on"
    networks:
      users-bridge:
        ipv4_address: ${DB_IP}
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
networks:
  users-bridge:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET}
          gateway: ${NETWORK_GATEWAY}
secrets:
  privkey:
    file: ${SSH_PRIVKEY} 
  cert:
    file: ${SSH_CERT} 
volumes:
  pg_data: